import*as f from"node:module";import{pathToFileURL as T}from"node:url";import{createJiti as y}from"jiti";import h from"node:path";import{pathToFileURL as g}from"node:url";import{compile as D}from"tailwindcss";import u from"node:fs/promises";import a from"node:path";var x=[/import[\s\S]*?['"](.{3,}?)['"]/gi,/import[\s\S]*from[\s\S]*?['"](.{3,}?)['"]/gi,/export[\s\S]*from[\s\S]*?['"](.{3,}?)['"]/gi,/require\(['"`](.+)['"`]\)/gi],j=[".js",".cjs",".mjs"],E=["",".js",".cjs",".mjs",".ts",".cts",".mts",".jsx",".tsx"],R=["",".ts",".cts",".mts",".tsx",".js",".cjs",".mjs",".jsx"];async function v(t,r){for(let i of r){let e=`${t}${i}`;if((await u.stat(e).catch(()=>null))?.isFile())return e}for(let i of r){let e=`${t}/index${i}`;if(await u.access(e).then(()=>!0,()=>!1))return e}return null}async function p(t,r,i,e){let l=j.includes(e)?E:R,s=await v(a.resolve(i,r),l);if(s===null||t.has(s))return;t.add(s),i=a.dirname(s),e=a.extname(s);let n=await u.readFile(s,"utf-8"),o=[];for(let S of x)for(let d of n.matchAll(S))d[1].startsWith(".")&&o.push(p(t,d[1],i,e));await Promise.all(o)}async function c(t){let r=new Set;return await p(r,t,a.dirname(t),a.extname(t)),Array.from(r)}async function U(t,{base:r,onDependency:i}){return await D(t,{loadPlugin:async e=>{if(e[0]!==".")return m(e).then(o=>o.default??o);let l=h.resolve(r,e),[s,n]=await Promise.all([m(g(l).href+"?id="+Date.now()),c(l)]);i(l);for(let o of n)i(o);return s.default??s},loadConfig:async e=>{if(e[0]!==".")return m(e).then(o=>o.default??o);let l=h.resolve(r,e),[s,n]=await Promise.all([m(g(l).href+"?id="+Date.now()),c(l)]);i(l);for(let o of n)i(o);return s.default??s}})}var w=null;async function m(t){try{return await import(t)}catch(r){try{return w??=y(import.meta.url,{moduleCache:!1,fsCache:!1}),await w.import(t)}catch{}throw r}}if(!process.versions.bun){let t=f.createRequire(import.meta.url);f.register?.(T(t.resolve("@tailwindcss/node/esm-cache-loader")))}export{U as compile};
